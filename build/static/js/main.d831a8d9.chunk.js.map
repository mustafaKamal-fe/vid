{"version":3,"sources":["video.mp4","ControlsContext.js","progress.js","Board.js","Screen.js","ControlStation.js","App.js","index.js"],"names":["module","exports","ControlsContext","createContext","ProgressBar","styled","div","props","loaded","Progress","useContext","control","setControl","useState","precentage","setPrecentage","downloadProg","a","fetch","vid","response","reader","body","getReader","totalLength","headers","get","received","chunks","updateWithDataProgress","v","Math","round","read","done","value","push","length","chunksAll","Uint8Array","position","chunk","set","blob","Blob","type","content","URL","createObjectURL","Object","assign","start","vidData","useEffect","Controls","Board","console","log","onClick","e","preventDefault","document","querySelector","play","Display","Screen","id","src","Container","ControlStation","App","launch","vidNode","Provider","ReactDOM","render","StrictMode","getElementById"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,mC,qLCI5BC,EAFSC,0B,2ICGxB,IAAMC,EAAcC,IAAOC,IAAV,KACN,SAACC,GAAD,OAAWA,EAAMC,UAyEbC,EArEE,WAAO,IAAD,EACSC,qBAAWR,GADpB,mBACdS,EADc,KACLC,EADK,OAEeC,mBAAS,GAFxB,mBAEdC,EAFc,KAEFC,EAFE,KAIfC,EAAY,uCAAG,0DAAAC,EAAA,sEAEEC,MAAMC,KAFR,OAEfC,EAFe,OAGfC,EAASD,EAASE,KAAKC,YAGvBC,GAAeJ,EAASK,QAAQC,IAAI,kBAGpCC,EAAW,EACXC,EAAS,GACPC,EAAyB,SAACC,GAC9B,OAAIA,IAAMC,KAAKC,MAAOL,EAAWH,EAAe,KACvCO,KAAKC,MAAOL,EAAWH,EAAe,KAEtCM,GAfQ,wBAoBaT,EAAOY,OApBpB,oBAoBTC,EApBS,EAoBTA,KAAMC,EApBG,EAoBHA,OAEVD,EAtBa,qDA4BjBN,EAAOQ,KAAKD,GAEZR,GAAYQ,EAAME,OAElBtB,EAAcc,GAhCG,uBAsCnB,IAHIS,EAAY,IAAIC,WAAWZ,GAC3Ba,EAAW,EAEf,MAAkBZ,EAAlB,eAASa,EAAiB,KACxBH,EAAUI,IAAID,EAAOD,GACrBA,GAAYC,EAAMJ,OAGhBM,EAAO,IAAIC,KAAK,CAACN,GAAY,CAAEO,KAAM,cACrCC,EAAUC,IAAIC,gBAAgBL,GAClC/B,EACEqC,OAAOC,OAAO,GAAIvC,EAAS,CACzBwC,OAAO,EACPC,QAASN,KAhDM,4CAAH,qDA0DlB,OALAO,qBAAU,WACRrC,MAEC,IAGD,6BACE,kBAACZ,EAAD,CAAaI,OAAQM,GAAaA,EAAlC,O,iICtEN,IAAMwC,EAAWjD,IAAOC,IAAV,KA8BCiD,EAxBD,WAAM,MAEY7C,qBAAWR,GAFvB,mBAEXS,EAFW,UAMlB,OAHA0C,qBAAU,WACRG,QAAQC,IAAI9C,KACX,CAACA,IAEF,kBAAC2C,EAAD,KACE,6BACE,kBAAC,EAAD,OAEF,6BACE,4BACEI,QAAS,SAACC,GACRA,EAAEC,iBACFC,SAASC,cAAc,aAAaC,SAHxC,a,mICnBR,IAAMC,EAAU3D,IAAOC,IAAV,KAoBE2D,EAdA,WAAM,MAEWvD,qBAAWR,GAFtB,mBAEZS,EAFY,UAInB,OACE,kBAACqD,EAAD,KACGrD,EAAQwC,OACP,2BAAOe,GAAG,YACR,4BAAQC,IAAKxD,EAAQyC,QAASP,KAAK,iB,0HCZ7C,IAAMuB,EAAY/D,IAAOC,IAAV,KAcA+D,EARQ,WACrB,OACE,kBAACD,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCMSE,EAfH,WACV,IAKMC,EAAS1D,mBALM,CACnBsC,OAAO,EACPqB,QAAS,KACTpB,QAAS,OAIX,OACE,kBAAC,EAAgBqB,SAAjB,CAA0BtC,MAAOoC,GAC/B,kBAAC,EAAD,QCXNG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFf,SAASgB,eAAe,U","file":"static/js/main.d831a8d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/video.15b75f5a.mp4\";","import { createContext } from \"react\";\r\n\r\nconst ControlsContext = createContext();\r\n\r\nexport default ControlsContext;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport vid from \"./video.mp4\";\r\nimport styled from \"styled-components\";\r\nimport ControlsContext from \"./ControlsContext\";\r\n\r\nconst ProgressBar = styled.div`\r\n  width: ${(props) => props.loaded}%;\r\n  text-align: center;\r\n  background-color: yellow;\r\n`;\r\nconst Progress = () => {\r\n  const [control, setControl] = useContext(ControlsContext);\r\n  const [precentage, setPrecentage] = useState(0);\r\n\r\n  const downloadProg = async () => {\r\n    // resp and reader\r\n    let response = await fetch(vid);\r\n    let reader = response.body.getReader();\r\n\r\n    // get total content length\r\n    let totalLength = +response.headers.get(\"Content-Length\");\r\n\r\n    // start reading\r\n    let received = 0;\r\n    let chunks = [];\r\n    const updateWithDataProgress = (v) => {\r\n      if (v !== Math.round((received / totalLength) * 100)) {\r\n        return Math.round((received / totalLength) * 100);\r\n      } else {\r\n        return v;\r\n      }\r\n    };\r\n    while (true) {\r\n      // extract chunks or finish\r\n      const { done, value } = await reader.read();\r\n\r\n      if (done) {\r\n        // end loop\r\n        break;\r\n      }\r\n\r\n      // save indivisual chunks\r\n      chunks.push(value);\r\n      // update total recevied so far\r\n      received += value.length;\r\n      // update percentage for progress bar in the UI\r\n      setPrecentage(updateWithDataProgress);\r\n    }\r\n\r\n    let chunksAll = new Uint8Array(received);\r\n    let position = 0;\r\n\r\n    for (let chunk of chunks) {\r\n      chunksAll.set(chunk, position);\r\n      position += chunk.length;\r\n    }\r\n\r\n    let blob = new Blob([chunksAll], { type: \"video/mp4\" });\r\n    let content = URL.createObjectURL(blob);\r\n    setControl(\r\n      Object.assign({}, control, {\r\n        start: true,\r\n        vidData: content,\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    downloadProg();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <ProgressBar loaded={precentage}>{precentage}%</ProgressBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Progress;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Progress from \"./progress\";\r\nimport ControlsContext from \"./ControlsContext\";\r\nconst Controls = styled.div`\r\n  width: 30%;\r\n  height: 100%;\r\n  background-color: red;\r\n`;\r\n\r\nconst Board = () => {\r\n  // eslint-disable-next-line\r\n  const [control, setControl] = useContext(ControlsContext);\r\n  useEffect(() => {\r\n    console.log(control);\r\n  }, [control]);\r\n  return (\r\n    <Controls>\r\n      <div>\r\n        <Progress></Progress>\r\n      </div>\r\n      <div>\r\n        <button\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            document.querySelector(\"#vid-node\").play();\r\n          }}\r\n        >\r\n          ignite\r\n        </button>\r\n      </div>\r\n    </Controls>\r\n  );\r\n};\r\nexport default Board;\r\n","import React, { useContext } from \"react\";\r\nimport ControlsContext from \"./ControlsContext\";\r\nimport styled from \"styled-components\";\r\nconst Display = styled.div`\r\n  width: 70%;\r\n  height: 100%;\r\n  background-color: green;\r\n`;\r\n\r\nconst Screen = () => {\r\n  // eslint-disable-next-line\r\n  const [control, setControl] = useContext(ControlsContext);\r\n\r\n  return (\r\n    <Display>\r\n      {control.start && (\r\n        <video id=\"vid-node\">\r\n          <source src={control.vidData} type=\"video/mp4\"></source>\r\n        </video>\r\n      )}\r\n    </Display>\r\n  );\r\n};\r\nexport default Screen;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Board from \"./Board\";\r\nimport Screen from \"./Screen\";\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n`;\r\n\r\nconst ControlStation = () => {\r\n  return (\r\n    <Container>\r\n      <Board></Board>\r\n      <Screen></Screen>\r\n    </Container>\r\n  );\r\n};\r\nexport default ControlStation;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\n// import Progress from \"./progress\";\r\nimport ControlStation from \"./ControlStation\";\r\nimport ControlsContext from \"./ControlsContext\";\r\n\r\nconst App = () => {\r\n  const initialState = {\r\n    start: false,\r\n    vidNode: null,\r\n    vidData: null,\r\n  };\r\n  const launch = useState(initialState);\r\n\r\n  return (\r\n    <ControlsContext.Provider value={launch}>\r\n      <ControlStation></ControlStation>\r\n    </ControlsContext.Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./App.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}